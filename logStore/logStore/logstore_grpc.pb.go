// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: logstore.proto

package logStore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Logservice_PublishLog_FullMethodName = "/logstore.logservice/publishLog"
	Logservice_Getlog_FullMethodName     = "/logstore.logservice/getlog"
	Logservice_Clearlog_FullMethodName   = "/logstore.logservice/clearlog"
	Logservice_Listen_FullMethodName     = "/logstore.logservice/listen"
)

// LogserviceClient is the client API for Logservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogserviceClient interface {
	PublishLog(ctx context.Context, in *LogEntryReq, opts ...grpc.CallOption) (*LogEntryRes, error)
	Getlog(ctx context.Context, in *Logretrivalreq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	Clearlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearRes, error)
	Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
}

type logserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogserviceClient(cc grpc.ClientConnInterface) LogserviceClient {
	return &logserviceClient{cc}
}

func (c *logserviceClient) PublishLog(ctx context.Context, in *LogEntryReq, opts ...grpc.CallOption) (*LogEntryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntryRes)
	err := c.cc.Invoke(ctx, Logservice_PublishLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logserviceClient) Getlog(ctx context.Context, in *Logretrivalreq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Logservice_ServiceDesc.Streams[0], Logservice_Getlog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Logretrivalreq, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Logservice_GetlogClient = grpc.ServerStreamingClient[LogEntry]

func (c *logserviceClient) Clearlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearRes)
	err := c.cc.Invoke(ctx, Logservice_Clearlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logserviceClient) Listen(ctx context.Context, in *ListenReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Logservice_ServiceDesc.Streams[1], Logservice_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenReq, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Logservice_ListenClient = grpc.ServerStreamingClient[LogEntry]

// LogserviceServer is the server API for Logservice service.
// All implementations must embed UnimplementedLogserviceServer
// for forward compatibility.
type LogserviceServer interface {
	PublishLog(context.Context, *LogEntryReq) (*LogEntryRes, error)
	Getlog(*Logretrivalreq, grpc.ServerStreamingServer[LogEntry]) error
	Clearlog(context.Context, *emptypb.Empty) (*ClearRes, error)
	Listen(*ListenReq, grpc.ServerStreamingServer[LogEntry]) error
	mustEmbedUnimplementedLogserviceServer()
}

// UnimplementedLogserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogserviceServer struct{}

func (UnimplementedLogserviceServer) PublishLog(context.Context, *LogEntryReq) (*LogEntryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLog not implemented")
}
func (UnimplementedLogserviceServer) Getlog(*Logretrivalreq, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Getlog not implemented")
}
func (UnimplementedLogserviceServer) Clearlog(context.Context, *emptypb.Empty) (*ClearRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clearlog not implemented")
}
func (UnimplementedLogserviceServer) Listen(*ListenReq, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedLogserviceServer) mustEmbedUnimplementedLogserviceServer() {}
func (UnimplementedLogserviceServer) testEmbeddedByValue()                    {}

// UnsafeLogserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogserviceServer will
// result in compilation errors.
type UnsafeLogserviceServer interface {
	mustEmbedUnimplementedLogserviceServer()
}

func RegisterLogserviceServer(s grpc.ServiceRegistrar, srv LogserviceServer) {
	// If the following call pancis, it indicates UnimplementedLogserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Logservice_ServiceDesc, srv)
}

func _Logservice_PublishLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogserviceServer).PublishLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logservice_PublishLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogserviceServer).PublishLog(ctx, req.(*LogEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logservice_Getlog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Logretrivalreq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogserviceServer).Getlog(m, &grpc.GenericServerStream[Logretrivalreq, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Logservice_GetlogServer = grpc.ServerStreamingServer[LogEntry]

func _Logservice_Clearlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogserviceServer).Clearlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logservice_Clearlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogserviceServer).Clearlog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logservice_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogserviceServer).Listen(m, &grpc.GenericServerStream[ListenReq, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Logservice_ListenServer = grpc.ServerStreamingServer[LogEntry]

// Logservice_ServiceDesc is the grpc.ServiceDesc for Logservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstore.logservice",
	HandlerType: (*LogserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishLog",
			Handler:    _Logservice_PublishLog_Handler,
		},
		{
			MethodName: "clearlog",
			Handler:    _Logservice_Clearlog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getlog",
			Handler:       _Logservice_Getlog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listen",
			Handler:       _Logservice_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logstore.proto",
}
